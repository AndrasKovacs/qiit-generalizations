

Π[] : (Π A B)[F] = Π (A[F]) (B[F↑])

A : TY Δ
B : TY (Δ ▶ A)
F : SUB Γ Δ

------------------------------------------------------------

-- pasted from Π

Con : Γ.Con → Set i
Con Γ⁻ := (a : A.Con Γ⁻) → B.Con (Γ⁻, a)

  (Π A B)[F].Con Γ⁻ = (Π (A[F]) (B[F∘p, q])).Con Γ⁻

  (Π A B)[F].Con Γ⁻
  (Π A B).Con (F Γ⁻)
  (a : A.Con (F Γ⁻)) → B.Con(F Γ⁻, a)

  (Π (A[F]) (B[F∘p, q])).Con Γ⁻
  (a : A[F].Con Γ⁻) → B[F↑].Con (Γ⁻, a)
  (a : A[F].Con Γ⁻) → B.Con (F Γ⁻, a)
  OK

Sub : Con Γ⁻ → Con Δ⁻ → Γ.Sub Γ⁻ Δ⁻ → Set i
Sub Γ Δ σ⁻ := (a : A.Con Γ⁻) → B.Sub (Γ a) (Δ (A.Sub σ⁻ a)) (σ⁻, _)

  (Π A B)[F].Sub Γ Δ σ⁻
  (Π A B).Sub Γ Δ (F σ⁻)
  (a : A.Con (F Γ⁻)) → B.Sub (Γ a) (Δ (A.Sub (F σ⁻) a)) (F σ⁻, _)

  (Π (A[F]) (B[F↑])).Sub Γ Δ σ⁻
  (a : A[F].Con Γ⁻) → B[F↑].Sub (Γ a) (Δ (A[F].Sub σ⁻ a)) (σ⁻, _)
  (a : A.Con (F Γ⁻)) → B.Sub (Γ a) (Δ (A.Sub (F σ⁻) a)) (F σ⁻, _)
  OK

Ty : Con Γ⁻ → Γ.Ty Γ⁻ → Set i
Ty Γ A⁻ := {a : A.Con Γ⁻}(aa : A.Ty A⁻ a) → B.Ty (Γ a) (A⁻, aa)
  OK

Tm : (Γ : Con Γ⁻) → Ty Γ A⁻ → Γ.Tm Γ⁻ A⁻ → Set i
Tm Γ A t⁻ := (a : A.Con Γ⁻) → B.Tm (Γ a) (A (A.Tm t⁻ a)) (t⁻, _)
  OK

id : (Γ : Con Γ⁻) → Sub Γ Γ id
id Γ := λ a. B.id
  OK

_∘_ : Sub Δ Σ σ⁻ → Sub Γ Δ δ⁻ → Sub Γ Σ (σ⁻ ∘ δ⁻)
(σ ∘ δ) := λ a. (σ (A.Sub δ⁻ a) ∘ δ a)
  OK


_[_] : Ty Δ A⁻ → Sub Γ Δ σ⁻ → Ty Γ (A⁻[σ⁻])
A[σ] : {a : A.Con Γ⁻}(aa : A.Ty A⁻ (A.Sub σ⁻ a)) → B.Ty (Γ a) (A⁻[σ⁻], aa)
     := λ {a} aa. A {A.Sub σ⁻ a} aa [σ a]
  OK

_[_] : Tm Δ A t⁻ → (σ : Sub Γ Δ σ⁻) → Tm Γ (A[σ]) (t⁻[σ⁻])
t[σ] := λ a. t (A.Sub σ⁻ a) [σ a]
  OK


∙ : Con ∙
  : (a : A.Con ∙) → B.Con (∙, a)   -- A.Con ∙ is proof-irrelevant
  := λ _. B.∙

  (Π A B)[F].∙
  (Π A B).coe F∙⁻¹ (Π A B).∙
  (Π A B).coe F∙⁻¹ (λ _. ∙)
  (λ _. B.coe (F∙⁻¹, _) ∙)

  (Π A[F] B[F↑]).∙
  (λ _. B[F↑].∙)
  (λ _. B.coe (F∙⁻¹, _) ∙)
  OK

ε : (Γ : Con Γ⁻) → Sub Γ ∙ ε
  : (Γ : Con Γ⁻) → (a : A.Con Γ⁻) → B.Sub (Γ a) ∙ (ε, _)
  := λ a. B.ε
  OK


_▶_  : (Γ : Con Γ⁻) → Ty Γ A⁻ → Con (Γ⁻ ▶ A⁻)
(Γ ▶ A) : (a : A.Con (Γ⁻ ▶ A⁻)) → B.Con (Γ⁻ ▶ A⁻, a)
        := λ (A▶⁻¹(a, aa)). ((Γ a) ▶ A aa)

  (Π A B)[F].(Γ ▶ A)
  (Π A B).coe F▶⁻¹ (Γ (Π A B).▶ A)
  (Π A B).coe F▶⁻¹ (λ (A▶⁻¹(a, aa)). Γ a ▶ A aa)
  λ aa. B.coe (F▶⁻¹, _) (((λ (A▶⁻¹(a, aa)). Γ a ▶ A aa)) (A.Tm F▶ aa))
  λ aa. B.coe (F▶⁻¹, _) (((λ (A▶⁻¹(a, aa)). Γ a ▶ A aa)) (A.Tm F▶ aa))
  λ aa. B.coe (F▶⁻¹, _) (Γ (π₁ (A▶ (A.Tm F▶ aa))) (A ((π₂ (A▶ (A.Tm F▶ aa))))))

  (Π A[F] B[F↑]).(Γ ▶ A)
  (λ ((A[F]▶)⁻¹(a, aa)). Γ a (B[F↑].▶) A aa)
  (λ ((A[F]▶)⁻¹(a, aa)). B.coe (F▶⁻¹, _) (Γ a ▶ A aa))
  (λ aa. B.coe (F▶⁻¹, _) (Γ (π₁ (A[F]▶ aa) ▶ A (π₂ (A[F]▶ aa)))))
  OK

_,_ : (σ : Sub Γ Δ σ⁻) → Tm Γ (A[σ]) t⁻ → Sub Γ (Δ ▶ A) (σ⁻, t⁻)
(σ,t) : (a : A.Con Γ⁻) → B.Sub (Γ a) ((Δ ▶ A)(A.Sub (σ⁻, t⁻) a)) ((σ⁻, t⁻), _)
      : (a : A.Con Γ⁻) → B.Sub (Γ a) (Δ (A.Sub σ⁻ a) ▶ A (A.Tm t⁻ a)) ((σ⁻, t⁻), _)
      := λ a. (σ a, t a)

  (Π A B)[F].(σ, t)
  ((Π A B).coh F▶⁻¹ (Δ ▶ A)) ∘ (σ, t)
  λ a. ((Π A B).coh F▶⁻¹ (Δ ▶ A)) (A.Sub (σ⁻, t⁻) a) ∘ (σ a, t a)
  λ a. ((Π A B).coh F▶⁻¹ (Δ ▶ A)) (A.Sub (σ⁻, t⁻) a) ∘ (σ a, t a)
  λ a. B.coh (F▶⁻¹, _) ((Δ ▶ A) (A.Sub (σ⁻, t⁻) a)) ∘ (σ a, t a)
  λ a. B.coh (F▶⁻¹, _) ((Δ ▶ A) (A▶⁻¹(A.Sub σ⁻ a, A.Tm t⁻ a))) ∘ (σ a, t a)
  λ a. B.coh (F▶⁻¹, _) (Δ (A.Sub σ⁻ a) ▶ A (A.Tm t⁻ a)) ∘ (σ a, t a)

  (Π A[F] B[F↑]).(σ, t)
  λ a. (σ a  B[F↑]., t a)
  λ a. B.coh (F▶⁻¹, _) (Δ (A.Sub σ⁻ a) ▶ A (A.Tm t⁻ a)) ∘ (σ a , t a)
  OK

p : Sub (Γ ▶ A) Γ p
  : (a : A.Con (Γ⁻ ▶ A⁻)) → Sub ((Γ ▶ A) a) (Γ (A.Sub p a)) (p, _)
  : (A▶⁻¹(a, aa) : A.Con (Γ⁻ ▶ A⁻)) → Sub (Γ a ▶ A aa) (Γ a) (p, _)
  := λ a. p

  (Π A B)[F].p
  (Π A B).p ∘ (Π A B).coh⁻¹ F▶⁻¹ (Γ ▶ A)
  λ a. ((Π A B).p ∘ (Π A B).coh⁻¹ F▶⁻¹ (Γ ▶ A)) a
  λ a. B.p ∘ B.coh⁻¹ (F▶⁻¹, _) (Γ (π₁ (A F▶ a)) ▶ A (π₂ (A F▶ a)))

  (Π A[F] B[F↑]).p
  λ a. B[F↑].p
  λ a. B.p ∘ B.coh⁻¹ (F↑)▶⁻¹ (Γ _ ▶ A _)
  λ a. B.p ∘ B.coh⁻¹ (F▶⁻¹, _) (Γ _ ▶ A _)
  OK

q : Tm (Γ ▶ A) A[p] q
  := λ a. q
  OK similarly


Id : Tm Γ A t⁻ → Tm Γ A u⁻ → Ty Γ (Id t⁻ u⁻)
Id t u : Ty Γ (Id t⁻ u⁻)
       : {a}(aa : A.Ty (Id t⁻ u⁻) a) → B.Ty (Γ a) (Id t⁻ u⁻, aa)
  := λ {a} aa. Id (t a) (u a)

  (Π A B)[F].Id t u
  (Π A B).coe FId⁻¹ ((Π A B).Id t u)
  λ {a} aa. B.coe (FId⁻¹, _) (B.Id (t a) (u a))

  (Π A[F] B[F↑]).Id t u
  λ {a} aa. B[F↑].Id (t a) (u a)
  λ {a} aa. B.coe (FId⁻¹, _) (B.Id (t a) (u a))
  OK


Refl : (t : Tm Γ A t⁻) → Tm Γ (Id t t) (Refl t⁻)
  Refl t : (a : A.Con Γ⁻) → Tm (Γ a) (Id (t a) (t a)) (Refl t⁻, _)
         := λ a. Refl

  (Π A B)[F].Refl

  (Π A B).coh FId⁻¹ ((Π A B).Id t t) ∘ (Π A B).Refl t
  λ a. ((coh FId⁻¹ (Id t t))[id, A.Refl t]) a
  λ a. (coh FId⁻¹ (Id t t)) (A.Sub [id, Refl] a) [id, Refl]
  λ a. (coh FId⁻¹ (Id t t)) (A▶⁻¹(a, FId⁻¹ refl]) [id, Refl]
  λ a. (B.coh (FId⁻¹, _) (Id (t _) (t _))) [id, Refl]
        where _ = A▶⁻¹(a, FId⁻¹ refl]

  (Π A[F] B[F↑]).Refl
  λ a. B[F↑].Refl
  λ a. B.coh (FId⁻¹, _) (Id (t _) (t _)) [id, Refl]
  OK

K : {Γ : Con Γ⁻} → Con Δ⁻ → Ty Γ (K {Γ⁻} Δ⁻)
K {Γ} Δ : {a : A.Con Γ⁻}(aa : A.Ty (K Δ⁻) a) → Ty (Γ a) (K Δ⁻, aa)
  K {Γ} Δ := λ {a} aa. K {Γ a}(Δ (AK aa))


  (Π A B)[F].K Δ : (Π A B)[F].Ty Γ (K Δ⁻)
                 : (Π A B).Ty Γ (F (K Δ⁻))


Ty Γ A⁻ := {a : A.Con (F Γ⁻)}(aa : A.Ty (F (K Δ⁻)) a) → B.Ty (Γ a) (F A⁻, aa)

  FK : F (K Δ) ≈ K (F Δ)
     A (F (K Δ)) ≈ A (K (F Δ))
     A FK ∘ A▶⁻¹

  (Π A B)[F].K Δ
  (ΠAB).coe FK⁻¹ ((ΠAB).K Δ)
  λ {a} aa. B.coe (FK⁻¹, _) (((ΠAB).K Δ) (A.Tm FK aa))
  λ {a} aa. B.coe (FK⁻¹, _) (K (Δ (AK (A.Tm FK aa))))

  (Π A[F] B[F↑]).K Δ
  λ aa. B[F↑].K (Δ (AK aa))
  λ aa. B.coe (FK⁻¹, _) (K (Δ (AK aa))) -- ??

  TODO, check!


appK : Tm Γ (K Δ) t⁻ → Sub Γ Δ (appK t⁻)
appK t := λ (a : A.Con Γ⁻) . appK (t a)

   (Π A B)[F].appK t
   Π.appK (Π.coh⁻¹ FK⁻¹ (Π.K Δ) Π.∘ t)
   λ a. (Π.appK (Π.coh⁻¹ FK⁻¹ (Π.K Δ) Π.∘ t)) a
   λ a. (Π.appK (Π.coh⁻¹ FK⁻¹ (Π.K Δ) [id, t])) a
   λ a. appK ((Π.coh⁻¹ FK⁻¹ (Π.K Δ) [id, t]) a)
   λ a. appK ((Π.coh⁻¹ FK⁻¹ (Π.K Δ)) (A.Sub (id, t⁻) a) ([id, t] a))
   λ a. appK ((Π.coh⁻¹ FK⁻¹ (Π.K Δ)) (A.Sub (id, t⁻) a) ([id, t a]))
   λ a. appK ((Π.coh⁻¹ FK⁻¹ (Π.K Δ)) (A.Sub (id, t⁻) a) ([id, t a]))
   λ a. appK ((Π.coh⁻¹ FK⁻¹ (Π.K Δ)) (A.Sub (id, t⁻) a) ([id, t a]))
   λ a. appK (coh⁻¹ (FK⁻¹, _) (K (Δ _)) [id, t a]

   (Π A[F] B[F↑]).appK t
   λ a. B[F↑].appK (t a)
   λ a. B[F∘p, q].appK (t a)
   λ a. B.appK (coh⁻¹ (FK⁻¹, _) (K (Δ _) [id, t a]


lamK : Sub Γ Δ σ⁻ → Tm Γ (K Δ) (lamK σ⁻)
lamK σ (a : A.Con Γ⁻) := lamK (σ a)


-- again, we use pattern matching notation  AΣ⁻¹(aa, bb)
Σ : (A : Ty Γ A⁻) → Ty (Γ ▶ A) B⁻ → Ty Γ (Σ A⁻ B⁻)
Σ A B {a : A.Con Γ⁻}(aabb : A.Ty (Σ A⁻ B⁻) a) : B.Ty (Γ a) (Σ A⁻ B⁻, aabb)

  Σ A B (AΣ⁻¹(aa, bb)) := Σ (A aa) (B bb)
  -- Σ A B aabb := Σ (A (π₁ (FΣ aabb))) (B (π₂ (FΣ aabb)))

_,_ : (t : Tm Γ A t⁻) → Tm Γ (B[id, t]) u⁻ → Tm Γ (Σ A B) (t⁻, u⁻)
t,u (a : A.Con Γ⁻)

  (t, u) a := (t a, u a)

π₁ (t : Tm Γ (Σ A B) t⁻)

  (π₁ t) a := π₁ (t a)


π₂ : (t : Tm Γ (Σ A B) t⁻) → Tm Γ (B[id, π₁ t]) (π₂ t⁻)
  (π₂ t) a = π₂ (t a)


coe : Γ.iso Γ⁻ Δ⁻ → (Π A B).Con Γ⁻ → (Π A B).Con Δ⁻
    : Γ.iso Γ⁻ Δ⁻ → ((a : A Γ­) → B.Con(Γ⁻, a)) → ((a : A Δ⁻) → B.Con(Δ⁻, a))
  coe σ⁻ Γ := λ a. B.coe (σ⁻, _) (Γ (A (σ⁻⁻¹) a))
  -- note (σ⁻, _) iso comprehension
  -- coe in EL is just application

coh : (σ⁻ : Γ.iso Γ⁻ Δ⁻)(Γ : (Π A B).Con Γ⁻) → (Π A B).iso Γ (coe σ⁻ Γ) σ⁻
  (coh σ⁻ Γ) (a : A.Con Γ⁻)
     : Sub (Γ a) (coe σ⁻ Γ (A.Sub σ⁻ a)) (σ⁻, _)
     : Sub (Γ a) (coe (σ⁻, _) (Γ ((A.Sub σ⁻⁻¹ (A.Sub σ⁻ a)))) (σ⁻, _)
     : Sub (Γ a) (coe (σ⁻, _) (Γ a) (σ⁻, _)
  -- symmetrically for other morphism

  (coh σ⁻ Γ)   a := B.coh (σ⁻, _) (Γ a)
  (coh σ⁻ Γ)⁻¹ a := B.coh⁻¹ (σ⁻, _) (Γ (A σ⁻⁻¹ a))
  eqs OK


coe : Γ.iso A⁻ B⁻ → (Π A B).Ty Γ A⁻ → (Π A B).Ty Γ B⁻
coe t⁻ A : {a : A.Con Γ⁻}(aa : A.Ty B⁻ a) → B.Ty (Γ a) (B⁻, aa)
  coe t⁻ A := λ {a} aa.
    A.Tm t⁻ : ∀ a. U.iso (A A⁻ a) (A B⁻ a)

    A.Tm t⁻⁻¹ aa : A.Ty A⁻ a
    A (A.Tm t⁻⁻¹ aa) : B.Ty (Γ a) (A⁻, A.Tm t⁻⁻¹ aa)
    B.coe (t⁻, ?) (A (A.Tm t⁻⁻¹ aa)) : B.Ty (Γ a) (B⁻, aa)

    ? : (EL A).iso (A.Tm t⁻⁻¹ aa) aa t⁻
      : A.Tm t⁻ (A.Tm t⁻⁻¹ aa) = aa
        OK

  coe t⁻ A {a} aa := B.coe (t⁻, _) (A (A.Tm t⁻⁻¹ aa))


coh : (t⁻ : Γ.iso A⁻ B⁻)(A : (Π A B).Ty Γ A⁻) → (Π A B).iso A (coe t⁻ A) t⁻
  (coh t A) {a}   aa := B.coh (t⁻, _) (A aa)
  (coh t A)⁻¹ {a} aa := B.coh⁻¹ (t⁻, _) (A (A.Tm t⁻⁻¹ aa))
  eqs OK
