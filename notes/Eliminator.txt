

-- Eliminator model, for a fixed (Ω : Con) and (ωᴰ : Ωᴰ con) where con :≡ Ωᶜ id
-- We get eliminator by Ωᴱ id : Ωˢ con ωᴰ
--------------------------------------------------------------------------------


(Γ : Con)ᴱ     : (ν : Sub Ω Γ) → Γˢ (νᴬ con) (νᴰ ωᴰ)
(A : Ty Γ)ᴱ    : (ν : Sub Ω Γ)(t : Tm Ω (A[ν])) → Aˢ (tᴬ con)(tᴰ ωᴰ)(Γᴱ ν)
(σ : Sub Γ Δ)ᴱ : (ν : Sub Ω Γ) → Δᴱ (σ ∘ ν) = σˢ (Γᴱ ν)
(t : Tm Γ A)ᴱ  : (ν : Sub Ω Γ) → Aᴱ ν (t[ν]) = tˢ (Γᴱ ν)

∙ᴱ ν :≡ tt

(Γ ▶ A)ᴱ (ν, t) : (Γ ▶ A)ˢ ((ν, t)ᴬ con) ((ν, t)ᴰ ωᴰ)
                : (Γ ▶ A)ˢ (νᴬ con, tᴬ con) (νᴰ ωᴰ, tᴰ ωᴰ)
		: (f* : Γˢ (νᴬ con) (νᴰ ωᴰ)) × Aˢ (tᴬ con) (tᴰ ωᴰ) f*
  :≡ (Γᴱ ν, Aᴱ ν t)


(A[σ])ᴱ ν t : (A[σ])ˢ (tᴬ con)(tᴰ ωᴰ)(Γᴱ ν)
            : Aˢ (tᴬ con) (tᴰ ωᴰ) (σˢ (Γᴱ ν))

  Aᴱ (σ ∘ ν) t : Aˢ (tᴬ con) (tᴰ ωᴰ) (Δᴱ (σ ∘ ν))
  σᴱ ν         : Δᴱ (σ ∘ ν) = σˢ (Γˢ ν)

  (A[σ])ᴱ ν t :≡ Aᴱ (σ ∘ ν) t    -- well-typed by (σᴱ ν)

(id : Sub Γ Γ)ᴱ ν : Γᴱ ν = idˢ (Γᴱ ν)
  OK

((σ : Sub Δ θ) ∘ (δ : Sub Γ Δ))ᴱ (ν : Sub Ω Γ)
  : θᴱ (σ ∘ δ ∘ ν) = (σ ∘ δ)ˢ (Γᴱ ν)
  : θᴱ (σ ∘ δ ∘ ν) = σˢ (δˢ (Γᴱ ν))
  : θᴱ (σ ∘ δ ∘ ν) = σˢ (Δᴱ (δ ∘ ν))  -- by δᴱ ν : Δᴱ (δ ∘ ν) = δˢ (Γᴱ ν)
  OK                                  -- by σᴱ (δ ∘ ν) : θᴱ (σ ∘ δ ∘ ν) = σˢ (Δᴱ (δ ∘ ν))

(ε : Sub Γ ∙)ᴱ ν : ∙ᴱ (ε ∘ ν) = εˢ (Γᴱ ν)
                 : tt = tt
  OK

((σ : Sub Γ Δ) , (t : Tm Γ A[σ]))ᴱ (ν : Sub Ω Γ)
  : (Δ ▶ A)ᴱ ((σ, t) ∘ ν) = (σ, t)ˢ (Γᴱ ν)
  : (Δ ▶ A)ᴱ (σ ∘ ν, t[ν]) = (σˢ (Γᴱ ν), tˢ (Γᴱ ν))
  : (Δᴱ (σ ∘ ν), Aᴱ (σ ∘ ν) t[ν]) = (σˢ (Γᴱ ν), tˢ (Γᴱ ν))
  componentwise equalities:

  σᴱ ν : Δᴱ (σ ∘ ν) = σˢ (Γᴱ ν)
  OK

  tᴱ ν : (A[σ])ᴱ ν (t[ν]) = tˢ (Γᴱ ν)
       : Aᴱ (σ ∘ ν) t[ν]  = tˢ (Γᴱ ν)
  OK

(π₁ (σ : Sub Γ (Δ ▶ A)))ᴱ (ν : Sub Ω Γ)
  : Δᴱ (π₁ σ ∘ ν)   = (π₁ σ)ˢ (Γᴱ ν)
  : Δᴱ (π₁ (σ ∘ ν)) = ₁ (σˢ (Γᴱ ν))

  σᴱ ν : (Δ ▶ A)ᴱ (σ ∘ ν) = σˢ (Γᴱ ν)
       : (Δᴱ (π₁ (σ ∘ ν)), Aᴱ (π₁ (σ ∘ ν)) (π₂ (σ ∘ ν))) = σˢ (Γᴱ ν)
       hence Δᴱ (π₁ (σ ∘ ν)) = ₁ (σˢ (Γᴱ ν))
  OK

(π₂ (σ : Sub Γ (Δ ▶ A)))ᴱ (ν : Sub Ω Γ)
  : (A[π₁ σ])ᴱ ν (π₂ (σ ∘ ν)) = (π₂ σ)ˢ (Γᴱ ν)
  : (A[π₁ σ])ᴱ ν (π₂ (σ ∘ ν)) = ₂ (σˢ (Γᴱ ν))
  : Aᴱ (π₁ (σ ∘ ν)) (π₂ (σ ∘ ν)) = ₂ (σˢ (Γᴱ ν))

  σᴱ ν : (Δᴱ (π₁ (σ ∘ ν)), Aᴱ (π₁ (σ ∘ ν)) (π₂ (σ ∘ ν))) = σˢ (Γᴱ ν)
    hence Aᴱ (π₁ (σ ∘ ν)) (π₂ (σ ∘ ν)) = ₂ (σˢ (Γᴱ ν))
  OK

((t : Tm Δ A)[ (σ : Sub Γ Δ) ])ᴱ (ν : Sub Ω Γ)
  : (A[σ])ᴱ ν (t[σ ∘ ν]) = (t[σ])ˢ (Γᴱ ν)
  : Aᴱ (σ ∘ ν) t[σ ∘ ν]  = tˢ (σˢ (Γᴱ ν))

  σᴱ ν       : Δᴱ (σ ∘ ν) = σˢ (Γᴱ ν)
  tᴱ (σ ∘ ν) : Aᴱ (σ ∘ ν) (t[σ ∘ ν]) = tˢ (Δᴱ (σ ∘ ν))
             : Aᴱ (σ ∘ ν) (t[σ ∘ ν]) = tˢ (Δᴱ (σ ∘ ν))
  OK

[id]ᴱ UIP
[∘]ᴱ  UIP
assᴱ  UIP
idlᴱ  UIP
idrᴱ  UIP
∙ηᴱ   UIP
π₁βᴱ  UIP
π₂βᴱ  UIP
▶ηᴱ   UIP
π₁∘ᴱ  UIP
π₂∘ᴱ  UIP

-- universe
--------------------------------------------------------------------------------

(U : Ty Γ)ᴱ ν a : Uˢ (aᴬ con) (aᴰ ωᴰ) (Γᴱ ν)
                : (α : aᴬ con) → aᴰ ωᴰ α

  a             : Tm Ω U
  (aᶜ id).fro α : Tm Ω (El a)

  ((aᶜ id).fro α)ᴰ ωᴰ : (El a)ᴰ ωᴰ (((aᶜ id).fro α)ᴬ con)
                      : aᴰ ωᴰ (((aᶜ id).fro α)ᴬ con)

  ((aᶜ id).fro α)ᶜ id : α = (((aᶜ id).fro α)ᴬ con)

  ((aᶜ id).fro α)ᶜ id :
    (El a).iso ((El a)ᶜ id ((aᶜ id).fro α)) (((aᶜ id).fro α)ᴬ con) id
    (El a)ᶜ id ((aᶜ id).fro α) = ((aᶜ id).fro α)ᴬ con
    (aᶜ id).to ((aᶜ id).fro α) = ((aᶜ id).fro α)ᴬ con
                            α  = ((aᶜ id).fro α)ᴬ con

    hence ((aᶜ id).fro α)ᴰ ωᴰ : aᴰ ωᴰ α

  Uᴱ ν a :≡ λ α. ((aᶜ id).fro α)ᴰ ωᴰ

U[]ᴱ : Uᴱ ν a = (U[σ])ᴱ ν a
     : (λ α. ((aᶜ id).fro α)ᴰ ωᴰ) = (λ α. ((aᶜ id).fro α)ᴰ ωᴰ)
     OK

(El (a : Tm Γ U))ᴱ ν (t : Tm Ω (El a[ν]))
  : (El a)ˢ (tᴬ con)(tᴰ ωᴰ)(Γᴱ ν)
  : aˢ (Γᴱ ν) (tᴬ con) = tᴰ ωᴰ

  tᶜ id : (El a[ν]).iso ((El a[ν])ᶜ id t) (tᴬ con) id
        : (a[ν])ᴹ id ((El a[ν])ᶜ id t) = tᴬ con
	: (El a[ν])ᶜ id t = tᴬ con
	: ((a[ν])ᶜ id).to t = tᴬ con

  enough to show:
    aˢ (Γᴱ ν) (((a[ν])ᶜ id).to t) = tᴰ ωᴰ

  aᴱ ν : Uᴱ ν (a[ν]) = aˢ (Γᴱ ν)
       : (λ α. (((a[ν])ᶜ id).fro α)ᴰ ωᴰ) = aˢ (Γᴱ ν)
       -- apply both sides to (((a[ν])ᶜ id).to t)
       (((a[ν])ᶜ id).fro (((a[ν])ᶜ id).to t))ᴰ ωᴰ = aˢ (Γᴱ ν) (((a[ν])ᶜ id).to t)
       -- hence by isomorphism:
       tᴰ ωᴰ = aˢ (Γᴱ ν) (((a[ν])ᶜ id).to t)
  OK

El[]ᴱ : (El a [σ])ᴱ ν t = (El (a[σ]))ᴱ ν t
  UIP


-- Π
--------------------------------------------------------------------------------e

(Π a B)ᴱ ν (t : Tm Ω (Π a[ν] B[ν↑]))
  : (Π a B)ˢ (tᴬ con) (tᴰ ωᴰ) (Γᴱ ν)
  : (α : aᴬ (νᴬ con)) → Bˢ (tᴬ con α) (tᴰ ωᴰ (aˢ (Γᴱ ν) α)) (Γᴱ ν, refl)

  a[ν] : Tm Ω U
  (a[ν])ᶜ id : U.iso (Uᶜ id a[ν]) (aᴬ (νᴬ con)) id
             : Set.iso (Tm Ω (El a[ν])) (aᴬ (νᴬ con))

  let α' : Tm Ω (El a[ν])
      α' = ((a[ν])ᶜ id).fro α

  aᴱ ν : Uᴱ ν (a[ν]) = aˢ (Γᴱ ν)
       : (λ α. (((a[ν])ᶜ id).fro α)ᴰ ωᴰ) = aˢ (Γᴱ ν)
       -- apply sides to α
       α'ᴰ ωᴰ = aˢ (Γᴱ ν) α

  α'ᶜ id : ((a[ν])ᶜ id).to α' = α'ᴬ con
         : ((a[ν])ᶜ id).to (((a[ν])ᶜ id).fro α) = α'ᴬ con
	 : α = α'ᴬ con

  Bᴱ (ν, α') : (t : Tm Ω (B[ν, α'])) → Bˢ (tᴬ con)(tᴰ ωᴰ) ((Γ ▶ El a)ᴱ (ν, α'))
             : (t : Tm Ω (B[ν, α'])) → Bˢ (tᴬ con)(tᴰ ωᴰ) (Γᴱ ν, (El a)ᴱ ν α')
	     : (t : Tm Ω (B[ν, α'])) → Bˢ (tᴬ con)(tᴰ ωᴰ) (Γᴱ ν, _)

  Bᴱ (ν, α') (t @ α') : Bˢ ((t @ α')ᴬ con)    ((t @ α')ᴰ ωᴰ) (Γᴱ ν, _)
                      : Bˢ (tᴬ con (α'ᴬ con)) (tᴰ ωᴰ (α'ᴰ ωᴰ)) (Γᴱ ν, _)
		      : Bˢ (tᴬ con α) (tᴰ ωᴰ (aˢ (Γᴱ ν) α)) (Γᴱ ν, _)

  (Π a B)ᴱ ν t :≡ λ α. let α' = ((a[ν])ᶜ id).fro α in Bᴱ (ν, α') (t @ α')

Π[]ᴱ : ((Π a B)[σ])ᴱ ν t = (Π a[σ] B[σ↑])ᴱ ν t

       ((Π a B)[σ])ᴱ ν t
     = (Π a B)ᴱ (σ ∘ ν) t
     = λ α. let α' = ((a[σ ∘ ν])ᶜ id).fro α in Bᴱ (σ ∘ ν, α') (t @ α')

       (Π a[σ] B[σ↑])ᴱ ν t
     = λ α. let α' = ((a[σ ∘ ν])ᶜ id).fro α in B[σ↑]ᴱ (ν, α') (t @ α')
     = λ α. let α' = ((a[σ ∘ ν])ᶜ id).fro α in Bᴱ (σ ∘ ν, α') (t @ α')
     OK

(app (t : Tm Γ (Π a B)))ᴱ (ν, u)
  : Bᴱ (ν, u) (app t[ν, u]) = (app t)ˢ ((Γ ▶ El a)ᴱ (ν, u))
  : Bᴱ (ν, u) (app t[ν, u]) = (app t)ˢ (Γᴱ ν, (El a)ᴱ ν u)
  : Bᴱ (ν, u) (app t[ν, u]) = tˢ (Γᴱ ν) (uᴬ con)

  uᶜ id : (a[ν]ᶜ id).to u = uᴬ con

  tᴱ ν : (Π a B)ᴱ ν (t[ν]) = tˢ (Γᴱ ν)

       : (λ α. let α' = ((a[ν])ᶜ id).fro α in Bᴱ (ν, α') (t[ν] @ α'))
         = tˢ (Γᴱ ν)

       -- apply to both sides (uᴬ con)

       : let α' = ((a[ν])ᶜ id).fro (uᴬ con) in Bᴱ (ν, α') (t[ν] @ α'))
         = tˢ (Γᴱ ν) (uᴬ con)

       : let α' = ((a[ν])ᶜ id).fro ((a[ν]ᶜ id).to u) in Bᴱ (ν, α') (app t[ν, α'])
         = tˢ (Γᴱ ν) (uᴬ con)

       : Bᴱ (ν, u) (app t[ν, u]) = tˢ (Γᴱ ν) (uᴬ con)
  OK

app[]ᴱ : (app t [σ↑])ᴱ = app t[σ]
  UIP

-- Id
--------------------------------------------------------------------------------

(Id a t u)ᴱ ν : Uᴱ ν (Id a[ν] t[ν] u[ν]) = (Id a t u)ˢ (Γᴱ ν)
  UIP

Id[]ᴱ : ((Id a t u)[σ])ᴱ = Id (a[σ]) (t[σ]) (u[σ]))ᴱ
  UIP

(Reflect (e : Tm Γ (El (Id a t u))))ᴱ : tᴱ = uᴱ
  UIP

(Refl t)ᴱ ν : (El (Id a t t))ᴱ ν (Refl t[ν]) = (Refl t)ˢ (Γᴱ ν)
  UIP

(UIP (e : Tm Γ (El (Id a t t))))ᴱ : eᴱ = (Refl t)ᴱ
  UIP

-- Π̂ (external)
--------------------------------------------------------------------------------

(Π̂ (T : Set) (B : T → Ty Γ))ᴱ ν (t : Tm Ω (Π̂ T (λ α. B α [ν])))
  : (Π̂ T B)ˢ (tᴬ con) (tᴰ ωᴰ) (Γᴱ ν)
  : (α : T) → (B α)ˢ (tᴬ con α) (tᴰ ωᴰ α) (Γᴱ ν)
  -- assume (α : T)

  (B α)ᴱ ν (t @̂ α) : (B α)ˢ ((t @̂ α)ᴬ con) ((t @̂ α)ᴰ ωᴰ) (Γᴱ ν)
                   : (B α)ˢ (tᴬ con α) (tᴰ ωᴰ α) (Γᴱ ν)

  (Π̂ T B)ᴱ ν t :≡ λ α. (B α)ᴱ ν (t @̂ α)

Π̂[]ᴱ : ((Π̂ T B) [σ])ᴱ ν t = (Π̂ T (λ α . (B α) [σ]))ᴱ ν t
     : (λ α. (B α)ᴱ (σ ∘ ν) (t @̂ α)) = (λ α. ((B α)[σ])ᴱ ν (t @̂ α))
     : (λ α. (B α)ᴱ (σ ∘ ν) (t @̂ α)) = (λ α. (B α)ᴱ (σ ∘ ν) (t @̂ α))
  OK

(t @̂ α)ᴱ ν
  : (B α)ᴱ ν (t[ν] @̂ α) = (t @̂ α)ˢ (Γᴱ ν)
  : (B α)ᴱ ν (t[ν] @̂ α) = tˢ (Γᴱ ν) α

  t : Tm Γ (Π̃ T B)

  tᴱ ν : (Π̂ T B)ᴱ ν (t[ν]) = tˢ (Γᴱ ν)
       : (λ α. (B α)ᴱ ν (t[ν] @̂ α)) = tˢ (Γᴱ ν)
       -- apply α to sides
  OK

@̂[]ᴱ : ((t @̂ α)[σ])ᴱ = ((t[σ]) @̂ α)ᴱ
  UIP


-- Π̃ (infinitary)
--------------------------------------------------------------------------------

(Π̃ T b)ᴱ ν
  : Uᴱ ν (Π̃ T (λ α. (b α)[ν])) = (Π̃ T b)ˢ (Γᴱ ν)

  :   (λ g. (((Π̃ T (λ α. (b α)[ν]))ᶜ id).fro g)ᴰ ωᴰ)
    = (λ g α. (b α)ˢ (Γᴱ ν) (g α))

  -- funext, assume (g : (α : T) → (b α)ᴬ (νᴬ con))

  :   (((Π̃ T (λ α. (b α)[ν]))ᶜ id).fro g)ᴰ ωᴰ
    = (λ α. (b α)ˢ (Γᴱ ν) (g α))

  -- funext, assume (α : T)

  :   (((Π̃ T (λ α. (b α)[ν]))ᶜ id).fro g)ᴰ ωᴰ α
    = (b α)ˢ (Γᴱ ν) (g α)

  b α : Tm Γ U
  (b α)ᴱ ν : Uᴱ ν ((b α)[ν]) = (b α)ˢ (Γᴱ ν)
           : (λ α. ((((b α)[ν])ᶜ id).fro α)ᴰ ωᴰ) = (b α)ˢ (Γᴱ ν)
	   -- happly (g α)
	   : ((((b α)[ν])ᶜ id).fro (g α))ᴰ ωᴰ = (b α)ˢ (Γᴱ ν) (g α)

  :   (((Π̃ T (λ α. (b α)[ν]))ᶜ id).fro g)ᴰ ωᴰ α
    = ((((b α)[ν])ᶜ id).fro (g α))ᴰ ωᴰ

  :   (lam̃ (λ α. (((b α) [ν])ᶜ id).fro (g α)))ᴰ ωᴰ α
    = ((((b α)[ν])ᶜ id).fro (g α))ᴰ ωᴰ

  :   ((((b α)[ν])ᶜ id).fro (g α))ᴰ ωᴰ
    = ((((b α)[ν])ᶜ id).fro (g α))ᴰ ωᴰ
  OK

Π̃[]ᴱ : ((Π̃ T b)[σ])ᴱ = (Π̃ T (λ α . (b α)[σ]))ᴱ
  UIP

((t : Π̃ T b) @̃ α)ᴱ ν
  : (El (b α))ᴱ ν (t[ν] @̃ α) = (t @̃ α)ˢ (Γᴱ ν)
  UIP

@̃[]  : ((t @̃ α) [ σ ])ᴱ = ((t [ σ ]) @̃ α)ᴱ
  UIP

(lam̃ (g : (α : T) → Tm Γ (El (b α))))ᴱ ν
  : (El (Π̃ T b))ᴱ ν (lam̃ g [ν]) = (lam̃ g)ˢ (Γᴱ ν)
  UIP

β̃ᴱ : (lam̃ (λ α. t @̃ α))ᴱ = tᴱ
  UIP

η̃ᴱ : ((lam̃ f) @̃ α)ᴱ = (f α)ᴱ
  UIP
